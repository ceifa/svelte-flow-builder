{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Block.svelte",
    "../../Canvas.svelte",
    "../../Connector.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Canvas from \"./Canvas.svelte\";\n\n  let blocks = {};\n\n  const addBlock = () => {\n    blocks = {\n      ...blocks,\n      [Date.now()]: {\n        name: \"New block\",\n        x: 60,\n        y: 60\n      }\n    };\n  };\n</script>\n\n<style>\n  button {\n    position: absolute;\n    top: 10px;\n    left: 10px;\n    z-index: 1;\n  }\n\n  main {\n    overscroll-behavior: none;\n  }\n</style>\n\n<main>\n  <button on:click={addBlock}>+</button>\n  <Canvas {blocks} />\n</main>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  import Connector from \"./Connector.svelte\";\n  import { connections } from \"./connectionsStore\";\n\n  export let block;\n  export let blockId;\n  export let isSelected;\n  export let scale;\n\n  const dispatch = createEventDispatcher();\n\n  let startPoint = {};\n  let endPoint = {};\n  let oldBlock = {};\n\n  const handlePointerUp = () => {\n    if (isSelected) {\n      dispatch(\"select\", false);\n    }\n    connections.update(conns => [\n      ...conns.map(c => {\n        if (c.temp) {\n          c.temp = false;\n          c.end = blockId;\n        }\n        return c;\n      })\n    ]);\n  };\n\n  const handlePointerDown = ev => {\n    dispatch(\"select\", true);\n    startPoint = { x: ev.x, y: ev.y };\n    oldBlock = { ...block };\n  };\n\n  const handlePointerLeave = () => {\n    if (isSelected) {\n      dispatch(\"select\", false);\n    }\n  };\n\n  const handlePointerMove = ev => {\n    if (isSelected) {\n      endPoint = { x: ev.x, y: ev.y };\n      const dx = (startPoint.x - endPoint.x) / scale;\n      const dy = (startPoint.y - endPoint.y) / scale;\n      block.x = oldBlock.x - dx;\n      block.y = oldBlock.y - dy;\n    }\n  };\n</script>\n\n<style>\n  rect {\n    fill: white;\n    stroke: black;\n    stroke-width: 1px;\n    stroke-opacity: 0.2;\n  }\n\n  rect.selected {\n    stroke: #17d0d9;\n    stroke-width: 1px;\n    stroke-opacity: 1;\n  }\n\n  g {\n    z-index: 1;\n  }\n\n  g:hover {\n    cursor: move;\n  }\n\n  text {\n    user-select: none;\n    text-anchor: middle;\n  }\n</style>\n\n<g\n  on:pointermove={handlePointerMove}\n  on:pointerdown|stopPropagation={handlePointerDown}\n  on:pointerup={handlePointerUp}\n  on:pointerleave={handlePointerLeave}>\n  <rect\n    x={block.x}\n    y={block.y}\n    width=\"40px\"\n    height=\"20px\"\n    rx=\"1\"\n    ry=\"1\"\n    class:selected={isSelected} />\n  <text\n    x={block.x + 20}\n    y={block.y + 10 + 2}\n    font-family=\"Nunito Sans,Helvetica,sans-serif\"\n    font-size=\"4\"\n    fill=\"#607b99\">\n    {block.name}\n  </text>\n  <Connector {blockId} {block} />\n</g>\n",
    "<script>\n  import Connection from \"./Connection.svelte\";\n  import Block from \"./Block.svelte\";\n  import { connections } from \"./connectionsStore\";\n\n  export let blocks;\n  let tempConnection = undefined;\n  let selectedBlockId = undefined;\n\n  let screenWidth;\n  let viewBox = { x: 0, y: 0, w: window.innerWidth, h: window.innerHeight };\n  let oldViewBox = {};\n  let startPoint;\n  let endPoint;\n  $: scale = window.innerWidth / viewBox.w;\n\n  let isDragging = false;\n\n  const handlePointerUp = ev => {\n    if (isDragging) {\n      isDragging = false;\n    }\n  };\n\n  const handlePointerDown = ev => {\n    selectedBlockId = undefined;\n    startPoint = { x: ev.x, y: ev.y };\n    oldViewBox = { ...viewBox };\n    isDragging = true;\n  };\n\n  const handlePointerMove = ev => {\n    if (isDragging) {\n      endPoint = { x: ev.x, y: ev.y };\n      const dx = (startPoint.x - endPoint.x) / scale;\n      const dy = (startPoint.y - endPoint.y) / scale;\n      viewBox.x = oldViewBox.x + dx;\n      viewBox.y = oldViewBox.y + dy;\n    }\n  };\n\n  const handlePointerLeave = () => {\n    isDragging = false;\n  };\n\n  const handleMouseWheel = ev => {\n    if (isDragging) {\n      return;\n    }\n\n    const mx = ev.offsetX;\n    const my = ev.offsetY;\n    const dw = viewBox.w * Math.sign(ev.deltaY) * 0.05;\n    const dh = viewBox.h * Math.sign(ev.deltaY) * 0.05;\n    const dx = (dw * mx) / window.innerWidth;\n    const dy = (dh * my) / window.innerHeight;\n\n    viewBox = {\n      x: viewBox.x + dx,\n      y: viewBox.y + dy,\n      w: viewBox.w - dw,\n      h: viewBox.h - dh\n    };\n  };\n\n  const handleBlockSelect = blockId => {\n    selectedBlockId = blockId;\n  };\n</script>\n\n<style>\n  div {\n    width: 100%;\n    height: 100%;\n  }\n\n  svg {\n    width: 100%;\n    height: 100%;\n    cursor: grab;\n  }\n\n  svg.dragging {\n    cursor: grabbing;\n  }\n</style>\n\n<div bind:clientWidth={screenWidth}>\n  <svg\n    on:pointermove={handlePointerMove}\n    on:pointerdown={handlePointerDown}\n    on:pointerup={handlePointerUp}\n    on:pointerleave={handlePointerLeave}\n    on:wheel|passive={handleMouseWheel}\n    viewBox={`${viewBox.x} ${viewBox.y} ${viewBox.w} ${viewBox.h}`}\n    class:dragging={isDragging}>\n    {#each $connections as conn}\n      <Connection {blocks} connection={conn} {scale} {viewBox} />\n    {/each}\n    {#each Object.entries(blocks) as [blockId, block]}\n      <Block\n        {block}\n        {blockId}\n        {scale}\n        isSelected={blockId === selectedBlockId}\n        on:select={({ detail: selected }) => handleBlockSelect(selected ? blockId : undefined)} />\n    {/each}\n  </svg>\n</div>\n",
    "<script>\n  import { connections } from \"./connectionsStore\";\n  import { tick } from 'svelte';\n\n  export let block;\n  export let blockId;\n\n  let isConnecting = false;\n\n  const handlePointerDown = () => {\n    isConnecting = true;\n  };\n\n  const handleBodyPointerMove = ev => {\n    if (isConnecting) {\n      connections.update(cs => [\n        ...cs.filter(c => !c.temp),\n        {\n          start: blockId,\n          end: { x: ev.x, y: ev.y },\n          temp: true\n        }\n      ]);\n    }\n  };\n\n  const handleBodyPointerUp = async ev => {\n    isConnecting = false;\n    setTimeout(() => {\n      connections.update(cs => [...cs.filter(c => !c.temp)]);\n    }, 1);\n  };\n</script>\n\n<style>\n  circle {\n    cursor: pointer;\n  }\n</style>\n\n<svelte:body\n  on:pointermove={handleBodyPointerMove}\n  on:pointerup={handleBodyPointerUp} />\n<circle\n  on:pointerdown|stopPropagation={handlePointerDown}\n  cx={block.x + 20}\n  cy={block.y + 20}\n  r={2}\n  fill=\"#17d0d9\" />\n"
  ],
  "names": [],
  "mappings": "AAkBE,MAAM,cAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,IAAI,CAAE,IAAI,CACV,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,IAAI,cAAC,CAAC,AACJ,mBAAmB,CAAE,IAAI,AAC3B,CAAC;AC4BD,IAAI,eAAC,CAAC,AACJ,IAAI,CAAE,KAAK,CACX,MAAM,CAAE,KAAK,CACb,YAAY,CAAE,GAAG,CACjB,cAAc,CAAE,GAAG,AACrB,CAAC,AAED,IAAI,SAAS,eAAC,CAAC,AACb,MAAM,CAAE,OAAO,CACf,YAAY,CAAE,GAAG,CACjB,cAAc,CAAE,CAAC,AACnB,CAAC,AAED,CAAC,eAAC,CAAC,AACD,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,gBAAC,MAAM,AAAC,CAAC,AACP,MAAM,CAAE,IAAI,AACd,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,WAAW,CAAE,IAAI,CACjB,WAAW,CAAE,MAAM,AACrB,CAAC;ACRD,GAAG,eAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC,AAED,GAAG,eAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,IAAI,AACd,CAAC,AAED,GAAG,SAAS,eAAC,CAAC,AACZ,MAAM,CAAE,QAAQ,AAClB,CAAC;ACjDD,MAAM,cAAC,CAAC,AACN,MAAM,CAAE,OAAO,AACjB,CAAC"
}